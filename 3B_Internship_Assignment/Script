# =====================================================================
#               AI and Biotechnology / Bioinformatics
# =====================================================================
#              AI and Omics Research Internship (2025)
# ---------------------------------------------------------------------
#           Module II: Introduction to Genomics Data Analysis
#                        Assignment Submission
# ---------------------------------------------------------------------
#                      Microarray Data Analysis
# =====================================================================

# Topics Implemented:
# 1. Quality Control (QC)
# 2. RMA Normalization
# 3. Pre-processing and Filtering

#######################################################################
#### 0. Install and Load Required Packages ####
#######################################################################

# Bioconductor and CRAN packages used for microarray data analysis
# (Installed and loaded as required for assignment tasks)

if (!requireNamespace("BiocManager", quietly = TRUE))    
  install.packages("BiocManager")

# Install Bioconductor packages
BiocManager::install(c("GEOquery", "affy", "arrayQualityMetrics"))

# Install CRAN packages
install.packages("dplyr")

# Load necessary libraries
library(GEOquery)             # For downloading GEO datasets
library(affy)                 # For Affymetrix microarray data preprocessing
library(arrayQualityMetrics)  # For generating QC reports
library(dplyr)                # For data manipulation

# -------------------------------------
#### 1. Download Series Matrix Files ####
# -------------------------------------

# Performed quick exploratory analysis using preprocessed matrix data.
# Dataset used: GSE17612 (Schizophrenia study)

gse_data <- getGEO("GSE17612", GSEMatrix = TRUE)

# Extract data components
expression_data <- exprs(gse_data$GSE17612_series_matrix.txt.gz)  
feature_data <- fData(gse_data$GSE17612_series_matrix.txt.gz)     
phenotype_data <- pData(gse_data$GSE17612_series_matrix.txt.gz)   

# Check for missing values in phenotype metadata
sum(is.na(phenotype_data$source_name_ch1))   

# --------------------------------------
#### 2. Download Raw Data (CEL files) ####
# --------------------------------------

# Used raw Affymetrix CEL files for full preprocessing pipeline.
# Raw data was downloaded separately from NCBI GEO and untarred.

# untar("Raw_Data/GSE17612_RAW.tar", exdir = "Raw_Data/CEL_Files")

# Read CEL files into R
raw_data <- ReadAffy(celfile.path = "Raw_Data/CEL_Files")
raw_data  # Displays dataset info (platform, sample count etc.)

# Noted down annotation info from above output for downstream mapping.

# ---------------------------------------------------
#### 3. Quality Control (QC) Before Pre-processing ####
# ---------------------------------------------------

# Step: Identify outlier arrays and detect any technical issues
# Method: arrayQualityMetrics (generates interactive HTML report)

# QC performed on raw (unprocessed) data
arrayQualityMetrics(expressionset = raw_data,
                    outdir = "Results/QC_Raw_Data",
                    force = TRUE,
                    do.logtransform = TRUE)

# ✔️ Completed QC before normalization as per assignment requirement

# -------------------------------------------------------
#### 4. RMA (Robust Multi-array Average) Normalization ####
# -------------------------------------------------------

# Applied RMA normalization on raw data:
# - Background correction
# - Quantile normalization
# - Probe summarization

normalized_data <- rma(raw_data)

# ✔️ Normalized data successfully

# QC performed after normalization to check if any arrays still flagged
arrayQualityMetrics(expressionset = normalized_data,
                    outdir = "Results/QC_Normalized_Data",
                    force = TRUE)

# Extract normalized expression values
processed_data <- as.data.frame(exprs(normalized_data))
dim(processed_data)  # Dimensions: probes × samples

# -------------------------------------------------------------
#### 5. Filter Low-Variance Transcripts (Intensity Filtering) ####
# -------------------------------------------------------------

# Purpose: Remove low-expressed/low-variance probes
# Method: Median intensity-based filtering

# Compute median expression across samples
row_median <- rowMedians(as.matrix(processed_data))

# Plot distribution of probe-level median intensities
hist(row_median,
     breaks = 100,
     freq = FALSE,
     main = "Median Intensity Distribution")

# Set filtering threshold (empirically chosen)
threshold <- 9
abline(v = threshold, col = "black", lwd = 2)

# Filter out low-expressed probes
indx <- row_median > threshold
filtered_data <- processed_data[indx, ]

# Update sample names
colnames(filtered_data) <- rownames(phenotype_data)

# Overwrite processed data with filtered result
processed_data <- filtered_data

# ✔️ Completed probe filtering step. Transcripts retained: 
nrow(processed_data)

# -----------------------------------
#### 6. Phenotype Data Preparation ####
# -----------------------------------

# Used phenotype metadata to define experimental groups.
# Grouping: Schizophrenic vs Normal (Control)

class(phenotype_data$source_name_ch1)

groups <- factor(phenotype_data$source_name_ch1,
                 levels = c("Brain BA10 post-mortem schizophrenic", 
                            "Brain BA10 post-mortem control"),
                 labels = c("schizophrenic", "normal"))

class(groups)
levels(groups)

# ✔️ Successfully defined target groups based on metadata

# ===================================================
#           ✅ ASSIGNMENT TASKS COMPLETED
# ===================================================

# ✔️ 1. Quality control before and after normalization completed.
#      ➤ Outliers identified via HTML reports.

# ✔️ 2. RMA normalization applied.
# ✔️ 3. Low-intensity transcripts filtered using median intensity > 9.
#      ➤ Remaining probes: use nrow(processed_data) to report count

# ✔️ 4. Experimental groups labeled using phenotype metadata.

# Submission Instructions:
# Uploaded script to GitHub repository (as per form instructions):
# ➤ Google Form: https://forms.gle/1e9tj2Mqf5T9FKEJ7
# ➤ Submission Deadline: Sunday, 5th October 2025 (Midnight)

# END OF ASSIGNMENT SCRIPT
